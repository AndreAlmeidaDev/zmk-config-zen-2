#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&mt ESCAPE TAB             &kp Q              &kp W                &kp E                          &kp R            &kp T        &kp Y     &kp U             &kp I                &kp O                 &kp P                       &mt LEFT_BRACKET RIGHT_BRACKET
&kp LEFT_SHIFT             &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D                &hml LEFT_GUI F  &kp G        &kp H     &hmr RIGHT_GUI J  &hmr RIGHT_ALT K     &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMICOLON  &kp BACKSLASH
&mt LEFT_CONTROL CAPSLOCK  &kp Z              &kp X                &kp C                          &kp V            &kp B        &kp N     &kp M             &kp COMMA            &kp DOT               &kp SLASH                   &kp SQT
                                                                   &mt LS(NUMBER_2) LS(NUMBER_1)  &lt 1 ENTER      &kp SPACE    &kp BSPC  &lt 2 DELETE      &mt MINUS LS(MINUS)
            >;
        };

        lower {
            bindings = <
&kp F1  &kp F2             &kp F3               &kp F4            &kp F5            &kp F6     &kp HOME    &trans          &kp PAGE_DOWN   &kp PAGE_UP   &trans           &trans
&kp F7  &mt LEFT_SHIFT F8  &mt LEFT_CONTROL F9  &mt LEFT_ALT F10  &mt LEFT_GUI F11  &kp F12    &kp END     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans             &trans               &trans            &trans            &trans     &kp INSERT  &trans          &trans          &trans        &trans           &trans
                                                &trans            &trans            &trans     &trans      &trans          &trans
            >;
        };

        raise {
            bindings = <
&trans  &kp KP_PLUS      &kp KP_MINUS   &mt LS(NUMBER_7) NUMBER_7  &mt LS(NUMBER_8) NUMBER_8  &mt LS(NUMBER_9) NUMBER_9    &mt EQUAL NUBS  &mt LS(EQUAL) LS(NUBS)      &kp LS(NUMBER_8)            &kp LS(NUMBER_9)                &kp LS(NUMBER_2)              &kp MINUS
&trans  &kp KP_MULTIPLY  &kp KP_DIVIDE  &mt LS(NUMBER_4) NUMBER_4  &mt LS(NUMBER_5) NUMBER_5  &mt LS(NUMBER_6) NUMBER_6    &kp GRAVE       &mt RIGHT_GUI LS(NUMBER_7)  &mt RIGHT_ALT RA(NUMBER_7)  &mt RIGHT_CONTROL RA(NUMBER_0)  &mt RIGHT_SHIFT LS(NUMBER_1)  &kp LS(MINUS)
&trans  &trans           &trans         &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3    &trans          &kp LS(NUMBER_0)            &kp RA(NUMBER_8)            &kp RA(NUMBER_9)                &kp LS(NUMBER_6)              &kp LS(GRAVE)
                                        &mt LS(NUMBER_0) NUMBER_0  &trans                     &trans                       &trans          &trans                      &trans
            >;
        };

        tri {
            bindings = <
&bootloader     &trans        &trans        &trans        &trans        &sys_reset      &sys_reset    &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans              &bootloader
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans          &trans        &kp C_MUTE      &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans              &ext_power EP_TOG
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_REWIND  &kp C_PREVIOUS  &kp C_PLAY_PAUSE      &kp C_NEXT            &kp C_FAST_FORWARD  &trans
                                            &trans        &trans        &trans          &trans        &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
