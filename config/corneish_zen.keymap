#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <19 6 18 30 39 40 41 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&mt ESCAPE TAB        &kp Q              &kp W                &kp E             &kp R            &kp T        &kp Y     &kp U             &kp I             &kp O                 &kp P                  &kp RIGHT_BRACKET
&kp LG(LS(NUMBER_4))  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D   &hml LEFT_WIN F  &kp G        &kp H     &hmr RIGHT_WIN J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMI  &kp NON_US_BACKSLASH
&ext_power EP_TOG     &kp Z              &kp X                &kp C             &kp V            &kp B        &kp N     &kp M             &kp COMMA         &kp DOT               &kp MINUS              &kp SQT
                                                              &kp LEFT_COMMAND  &lt 1 ENTER      &kp SPACE    &kp BSPC  &lt 2 DELETE      &kp K_LOCK
            >;
        };

        lower {
            bindings = <
&kp BACKSLASH         &kp EXCLAMATION   &kp AT_SIGN   &kp POUND          &kp DOLLAR       &kp PERCENT     &kp AMPERSAND   &kp SLASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp K_SCREENSAVER
&kp LG(LS(NUMBER_5))  &kp K_PLAY_PAUSE  &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &bt BT_CLR      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT_ARROW        &trans     &kp F12
&bt BT_CLR_ALL        &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4    &sys_reset      &trans          &trans                &trans                 &trans     &kp ESCAPE
                                                      &trans             &trans           &bootloader     &bootloader     &trans          &trans
            >;
        };

        raise {
            bindings = <
&trans  &kp DOUBLE_QUOTES  &kp RA(E)  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9    &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION      &kp EXCLAMATION
&trans  &trans             &kp PLUS   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6    &kp FSLH       &kp BACKSLASH     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SINGLE_QUOTE  &kp PIPE
&trans  &trans             &kp ASTRK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp EQUAL      &trans            &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans            &kp AMPERSAND
                                      &kp NUMBER_0  &sys_reset    &trans          &bootloader    &trans            &sys_reset
            >;
        };

        tri {
            bindings = <
&bt BT_CLR_ALL  &out OUT_USB  &out OUT_BLE  &out OUT_TOG  &rgb_ug RGB_OFF  &rgb_ug RGB_ON    &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR   &bt BT_CLR_ALL
&bt BT_SEL 0    &bt BT_SEL 1  &trans        &trans        &trans           &trans            &bl BL_TOG        &bl BL_DEC         &bl BL_INC    &trans        &trans       &trans
&sys_reset      &bootloader   &trans        &trans        &trans           &trans            &ext_power EP_ON  &ext_power EP_OFF  &trans        &trans        &bootloader  &sys_reset
                                            &trans        &trans           &trans            &trans            &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
